{"ast":null,"code":"/**\n * Bundle of @devexpress/dx-react-chart-material-ui\n * Generated: 2018-11-07\n * Version: 1.9.0\n * License: https://js.devexpress.com/Licensing\n */\nimport { withPatchedProps, Chart, withComponents, Palette, Legend, Title, ScatterSeries, Grid, ValueGrid, ArgumentGrid, Axis, ValueAxis, ArgumentAxis } from '@devexpress/dx-react-chart';\nexport { PieSeries, BarSeries, LineSeries, AreaSeries, SplineSeries } from '@devexpress/dx-react-chart';\nimport { darken, fade, lighten } from '@material-ui/core/styles/colorManipulator';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport { createElement, PureComponent } from 'react';\nimport { node, oneOfType, string, number } from 'prop-types';\nimport List from '@material-ui/core/List';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography';\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar getBorderColor = function getBorderColor(theme) {\n  return theme.palette.type === 'light' ? lighten(fade(theme.palette.divider, 1), 0.88) : darken(fade(theme.palette.divider, 1), 0.68);\n};\n\nvar withClassName = function withClassName() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var setClassName = function setClassName(_ref) {\n    var className = _ref.className,\n        classes = _ref.classes,\n        restProps = objectWithoutProperties(_ref, ['className', 'classes']);\n    return _extends({\n      className: classNames(classes.root, className)\n    }, restProps);\n  }; // TODO: First candidate to `compose` util?\n\n\n  return function (Target) {\n    return withStyles.apply(undefined, args)(withPatchedProps(setClassName)(Target));\n  };\n};\n\nvar styles = function styles(theme) {\n  var _theme$typography = theme.typography,\n      fontFamily = _theme$typography.fontFamily,\n      fontSize = _theme$typography.fontSize,\n      fontWeightLight = _theme$typography.fontWeightLight;\n  return {\n    root: {\n      fontFamily: fontFamily,\n      fontSize: fontSize,\n      fontWeight: fontWeightLight,\n      display: 'flex',\n      flexDirection: 'column',\n      padding: '10px'\n    }\n  };\n};\n\nvar Root = withClassName(styles)(Chart.Root);\n\nvar styles$1 = function styles(theme) {\n  var fontFamily = theme.typography.fontFamily;\n  return {\n    root: {\n      fill: theme.palette.text.secondary,\n      fontFamily: fontFamily,\n      fontSize: 12,\n      fontWeight: 400\n    }\n  };\n};\n\nvar Label = withClassName(styles$1)(Chart.Label);\nvar palette = ['#42A5F5', '#FF7043', '#9CCC65', '#FFCA28', '#26A69A', '#EC407A'];\n\nvar ChartWithPalette = function ChartWithPalette(_ref) {\n  var children = _ref.children,\n      props = objectWithoutProperties(_ref, ['children']);\n  return createElement(Chart, props, createElement(Palette, {\n    scheme: palette\n  }), children);\n};\n\nChartWithPalette.components = Chart.components;\nprocess.env.NODE_ENV !== \"production\" ? ChartWithPalette.propTypes = {\n  children: node.isRequired\n} : void 0;\nvar Chart$1 = withComponents({\n  Root: Root\n})(ChartWithPalette);\nChart$1.Label = Label;\n\nvar styles$2 = function styles() {\n  return {\n    root: {\n      paddingTop: 16,\n      paddingBottom: 16\n    }\n  };\n};\n\nvar Root$1 = withClassName(styles$2, {\n  name: 'LegendRoot'\n})(List);\n\nvar styles$3 = function styles() {\n  return {\n    root: {\n      fontSize: 14,\n      paddingLeft: 8,\n      paddingRight: 8\n    }\n  };\n};\n\nvar Label$1 = withClassName(styles$3, {\n  name: 'LegendLabel'\n})(function (_ref) {\n  var text = _ref.text,\n      restProps = objectWithoutProperties(_ref, ['text']);\n  return createElement(ListItemText, restProps, text);\n});\n\nvar styles$4 = function styles(theme) {\n  return {\n    root: {\n      alignItems: 'center',\n      paddingTop: theme.spacing.unit * 0.5,\n      paddingBottom: theme.spacing.unit * 0.5\n    }\n  };\n};\n\nvar Item = withClassName(styles$4, {\n  name: 'LegendItem'\n})(ListItem);\nvar Legend$1 = withComponents({\n  Root: Root$1,\n  Item: Item,\n  Label: Label$1\n})(Legend);\n\nvar Text = function (_React$PureComponent) {\n  inherits(Text, _React$PureComponent);\n\n  function Text() {\n    classCallCheck(this, Text);\n    return possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));\n  }\n\n  createClass(Text, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          text = _props.text,\n          restProps = objectWithoutProperties(_props, ['text']);\n      return createElement(Typography, _extends({\n        component: 'h3',\n        variant: 'h5'\n      }, restProps), text);\n    }\n  }]);\n  return Text;\n}(PureComponent);\n\nprocess.env.NODE_ENV !== \"production\" ? Text.propTypes = {\n  text: oneOfType([string, number]).isRequired\n} : void 0;\nvar Title$1 = withComponents({\n  Text: Text\n})(Title);\n\nvar styles$5 = function styles(theme) {\n  return {\n    point: {\n      fill: theme.palette.background.paper\n    }\n  };\n};\n\nvar setClassName = function setClassName(_ref) {\n  var classes = _ref.classes,\n      restProps = objectWithoutProperties(_ref, ['classes']);\n\n  if (restProps.state) {\n    var className = restProps.className,\n        rest = objectWithoutProperties(restProps, ['className']);\n    return _extends({\n      className: classNames(classes.point, className)\n    }, rest);\n  }\n\n  return restProps;\n};\n\nvar Point = withStyles(styles$5)(withPatchedProps(setClassName)(ScatterSeries.Point));\nvar ScatterSeries$1 = withComponents({\n  Point: Point\n})(ScatterSeries);\n\nvar styles$6 = function styles(theme) {\n  return {\n    root: {\n      stroke: getBorderColor(theme),\n      shapeRendering: 'crispEdges'\n    }\n  };\n};\n\nvar Line = withClassName(styles$6)(Grid.Line);\nvar ValueGrid$1 = withComponents({\n  Line: Line\n})(ValueGrid);\nvar ArgumentGrid$1 = withComponents({\n  Line: Line\n})(ArgumentGrid);\n\nvar styles$7 = function styles() {\n  return {\n    root: {\n      shapeRendering: 'crispEdges'\n    }\n  };\n};\n\nvar Root$2 = withClassName(styles$7)(Axis.Root);\n\nvar styles$8 = function styles(theme) {\n  return {\n    root: {\n      stroke: getBorderColor(theme),\n      shapeRendering: 'crispEdges'\n    }\n  };\n};\n\nvar Tick = withClassName(styles$8)(Axis.Tick);\n\nvar styles$9 = function styles(theme) {\n  var fontFamily = theme.typography.fontFamily;\n  return {\n    root: {\n      fill: theme.palette.text.secondary,\n      fontFamily: fontFamily,\n      fontSize: 12,\n      fontWeight: 400,\n      backgroundColor: theme.palette.background.paper\n    }\n  };\n};\n\nvar Label$2 = withClassName(styles$9)(Axis.Label);\n\nvar styles$a = function styles(theme) {\n  return {\n    root: {\n      stroke: getBorderColor(theme),\n      shapeRendering: 'crispEdges'\n    }\n  };\n};\n\nvar Line$1 = withClassName(styles$a)(Axis.Line);\nvar ValueAxis$1 = withComponents({\n  Root: Root$2,\n  Tick: Tick,\n  Label: Label$2,\n  Line: Line$1\n})(ValueAxis);\nvar ArgumentAxis$1 = withComponents({\n  Root: Root$2,\n  Tick: Tick,\n  Label: Label$2,\n  Line: Line$1\n})(ArgumentAxis);\nexport { Chart$1 as Chart, Legend$1 as Legend, Title$1 as Title, ScatterSeries$1 as ScatterSeries, ValueGrid$1 as ValueGrid, ArgumentGrid$1 as ArgumentGrid, ValueAxis$1 as ValueAxis, ArgumentAxis$1 as ArgumentAxis };","map":null,"metadata":{},"sourceType":"module"}