/**
 * Bundle of @devexpress/dx-react-chart-material-ui
 * Generated: 2018-11-07
 * Version: 1.9.0
 * License: https://js.devexpress.com/Licensing
 */

import { withPatchedProps, Chart, withComponents, Palette, Legend, Title, ScatterSeries, Grid, ValueGrid, ArgumentGrid, Axis, ValueAxis, ArgumentAxis } from '@devexpress/dx-react-chart';
export { PieSeries, BarSeries, LineSeries, AreaSeries, SplineSeries } from '@devexpress/dx-react-chart';
import { darken, fade, lighten } from '@material-ui/core/styles/colorManipulator';
import { withStyles } from '@material-ui/core/styles';
import classNames from 'classnames';
import { createElement, PureComponent } from 'react';
import { node, oneOfType, string, number } from 'prop-types';
import List from '@material-ui/core/List';
import ListItemText from '@material-ui/core/ListItemText';
import ListItem from '@material-ui/core/ListItem';
import Typography from '@material-ui/core/Typography';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var getBorderColor = function getBorderColor(theme) {
  return theme.palette.type === 'light' ? lighten(fade(theme.palette.divider, 1), 0.88) : darken(fade(theme.palette.divider, 1), 0.68);
};

var withClassName = function withClassName() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var setClassName = function setClassName(_ref) {
    var className = _ref.className,
        classes = _ref.classes,
        restProps = objectWithoutProperties(_ref, ['className', 'classes']);
    return _extends({
      className: classNames(classes.root, className)
    }, restProps);
  };
  // TODO: First candidate to `compose` util?
  return function (Target) {
    return withStyles.apply(undefined, args)(withPatchedProps(setClassName)(Target));
  };
};

var styles = function styles(theme) {
  var _theme$typography = theme.typography,
      fontFamily = _theme$typography.fontFamily,
      fontSize = _theme$typography.fontSize,
      fontWeightLight = _theme$typography.fontWeightLight;

  return {
    root: {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: fontWeightLight,
      display: 'flex',
      flexDirection: 'column',
      padding: '10px'
    }
  };
};

var Root = withClassName(styles)(Chart.Root);

var styles$1 = function styles(theme) {
  var fontFamily = theme.typography.fontFamily;

  return {
    root: {
      fill: theme.palette.text.secondary,
      fontFamily: fontFamily,
      fontSize: 12,
      fontWeight: 400
    }
  };
};

var Label = withClassName(styles$1)(Chart.Label);

var palette = ['#42A5F5', '#FF7043', '#9CCC65', '#FFCA28', '#26A69A', '#EC407A'];

var ChartWithPalette = function ChartWithPalette(_ref) {
  var children = _ref.children,
      props = objectWithoutProperties(_ref, ['children']);
  return createElement(
    Chart,
    props,
    createElement(Palette, { scheme: palette }),
    children
  );
};

ChartWithPalette.components = Chart.components;

process.env.NODE_ENV !== "production" ? ChartWithPalette.propTypes = {
  children: node.isRequired
} : void 0;

var Chart$1 = withComponents({ Root: Root })(ChartWithPalette);
Chart$1.Label = Label;

var styles$2 = function styles() {
  return {
    root: {
      paddingTop: 16,
      paddingBottom: 16
    }
  };
};

var Root$1 = withClassName(styles$2, { name: 'LegendRoot' })(List);

var styles$3 = function styles() {
  return {
    root: {
      fontSize: 14,
      paddingLeft: 8,
      paddingRight: 8
    }
  };
};

var Label$1 = withClassName(styles$3, { name: 'LegendLabel' })(function (_ref) {
  var text = _ref.text,
      restProps = objectWithoutProperties(_ref, ['text']);
  return createElement(
    ListItemText,
    restProps,
    text
  );
});

var styles$4 = function styles(theme) {
  return {
    root: {
      alignItems: 'center',
      paddingTop: theme.spacing.unit * 0.5,
      paddingBottom: theme.spacing.unit * 0.5
    }
  };
};

var Item = withClassName(styles$4, { name: 'LegendItem' })(ListItem);

var Legend$1 = withComponents({
  Root: Root$1, Item: Item, Label: Label$1
})(Legend);

var Text = function (_React$PureComponent) {
  inherits(Text, _React$PureComponent);

  function Text() {
    classCallCheck(this, Text);
    return possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
  }

  createClass(Text, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          text = _props.text,
          restProps = objectWithoutProperties(_props, ['text']);

      return createElement(
        Typography,
        _extends({ component: 'h3', variant: 'h5' }, restProps),
        text
      );
    }
  }]);
  return Text;
}(PureComponent);

process.env.NODE_ENV !== "production" ? Text.propTypes = {
  text: oneOfType([string, number]).isRequired
} : void 0;

var Title$1 = withComponents({ Text: Text })(Title);

var styles$5 = function styles(theme) {
  return {
    point: {
      fill: theme.palette.background.paper
    }
  };
};

var setClassName = function setClassName(_ref) {
  var classes = _ref.classes,
      restProps = objectWithoutProperties(_ref, ['classes']);

  if (restProps.state) {
    var className = restProps.className,
        rest = objectWithoutProperties(restProps, ['className']);

    return _extends({
      className: classNames(classes.point, className)
    }, rest);
  }
  return restProps;
};

var Point = withStyles(styles$5)(withPatchedProps(setClassName)(ScatterSeries.Point));

var ScatterSeries$1 = withComponents({ Point: Point })(ScatterSeries);

var styles$6 = function styles(theme) {
  return {
    root: {
      stroke: getBorderColor(theme),
      shapeRendering: 'crispEdges'
    }
  };
};

var Line = withClassName(styles$6)(Grid.Line);

var ValueGrid$1 = withComponents({ Line: Line })(ValueGrid);

var ArgumentGrid$1 = withComponents({ Line: Line })(ArgumentGrid);

var styles$7 = function styles() {
  return {
    root: {
      shapeRendering: 'crispEdges'
    }
  };
};

var Root$2 = withClassName(styles$7)(Axis.Root);

var styles$8 = function styles(theme) {
  return {
    root: {
      stroke: getBorderColor(theme),
      shapeRendering: 'crispEdges'
    }
  };
};

var Tick = withClassName(styles$8)(Axis.Tick);

var styles$9 = function styles(theme) {
  var fontFamily = theme.typography.fontFamily;

  return {
    root: {
      fill: theme.palette.text.secondary,
      fontFamily: fontFamily,
      fontSize: 12,
      fontWeight: 400,
      backgroundColor: theme.palette.background.paper
    }
  };
};

var Label$2 = withClassName(styles$9)(Axis.Label);

var styles$a = function styles(theme) {
  return {
    root: {
      stroke: getBorderColor(theme),
      shapeRendering: 'crispEdges'
    }
  };
};

var Line$1 = withClassName(styles$a)(Axis.Line);

var ValueAxis$1 = withComponents({
  Root: Root$2, Tick: Tick, Label: Label$2, Line: Line$1
})(ValueAxis);

var ArgumentAxis$1 = withComponents({
  Root: Root$2, Tick: Tick, Label: Label$2, Line: Line$1
})(ArgumentAxis);

export { Chart$1 as Chart, Legend$1 as Legend, Title$1 as Title, ScatterSeries$1 as ScatterSeries, ValueGrid$1 as ValueGrid, ArgumentGrid$1 as ArgumentGrid, ValueAxis$1 as ValueAxis, ArgumentAxis$1 as ArgumentAxis };
//# sourceMappingURL=dx-react-chart-material-ui.es.js.map
